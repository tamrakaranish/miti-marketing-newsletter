name: Publish Newsletter

on:
  push:
    branches: [ main ]
    paths:
      - "newsletter/*.md"

permissions:
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find latest newsletter file
        id: find
        shell: bash
        run: |
          set -euo pipefail
          FILE="$(ls -1t newsletter/*.md | head -n 1)"
          if [ -z "$FILE" ]; then
            echo "No newsletter/*.md found"; exit 1
          fi
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "Found file: $FILE"

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Post preview to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: "#ai-newsletter"   # <-- change to your channel
          FILE: ${{ steps.find.outputs.file }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${SLACK_BOT_TOKEN:-}" ]; then
            echo "SLACK_BOT_TOKEN is not set"; exit 1
          fi
          PREVIEW="$(head -n 20 "$FILE")"
          JSON="$(jq -n --arg ch "$SLACK_CHANNEL" --arg txt "$PREVIEW" \
            '{channel:$ch, text:("New issue published:\n" + $txt), unfurl_links:false}')"

          RESP="$(curl -s -w '\n%{http_code}' -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-type: application/json; charset=utf-8" \
            --data "$JSON")"

          BODY="$(echo "$RESP" | head -n1)"
          CODE="$(echo "$RESP" | tail -n1)"

          echo "Slack HTTP: $CODE"
          echo "Slack Body:"; echo "$BODY" | jq .

          OK="$(echo "$BODY" | jq -r '.ok // false')"
          if [ "$OK" != "true" ]; then
            echo "Slack post failed"; exit 1
          fi

      - name: Update Confluence archive
        env:
          CF_BASE:  ${{ secrets.CONFLUENCE_BASE_URL }}   # e.g. https://yourcompany.atlassian.net
          CF_USER:  ${{ secrets.CONFLUENCE_USER }}        # Atlassian email
          CF_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}   # Atlassian API token
          CF_PAGE_ID: ${{ secrets.CONFLUENCE_PAGE_ID }}   # numeric page id
          FILE: ${{ steps.find.outputs.file }}
        shell: bash
        run: |
          set -euo pipefail
          for v in CF_BASE CF_USER CF_TOKEN CF_PAGE_ID; do
            if [ -z "${!v:-}" ]; then echo "$v is not set"; exit 1; fi
          done

          # HTML-escape markdown content and wrap in <pre> for simplicity
          HTML_CONTENT="$(printf '<pre>%s</pre>' "$(sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g' "$FILE")")"

          # Get current page to obtain version
          CURR="$(curl -s -u "$CF_USER:$CF_TOKEN" "$CF_BASE/wiki/api/v2/pages/$CF_PAGE_ID")"
          VER="$(echo "$CURR" | jq -r '.version.number // 1')"
          NEW=$((VER+1))

          TITLE="$(basename "$FILE" .md): MitiMind"

          DATA="$(jq -n --arg title "$TITLE" --arg body "$HTML_CONTENT" --argjson ver "$NEW" \
            '{version:{number:$ver}, title:$title, body:{storage:{value:$body, representation:"storage"}}}')"

          RESP="$(curl -s -w '\n%{http_code}' -u "$CF_USER:$CF_TOKEN" \
            -X PUT "$CF_BASE/wiki/api/v2/pages/$CF_PAGE_ID" \
            -H "Content-Type: application/json" \
            --data "$DATA")"

          BODY="$(echo "$RESP" | head -n1)"
          CODE="$(echo "$RESP" | tail -n1)"

          echo "Confluence HTTP: $CODE"
          echo "Confluence Body:"; echo "$BODY" | jq .

          if [ "$CODE" -lt 200 ] || [ "$CODE" -ge 300 ]; then
            echo "Confluence update failed"; exit 1
          fi

          echo "Updated page title:"; echo "$BODY" | jq -r '.title'
          echo "New version:"; echo "$BODY" | jq -r '.version.number'
