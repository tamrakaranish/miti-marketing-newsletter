name: Publish Newsletter

on:
  push:
    branches: [ main ]
    paths:
      - "newsletter/*.md"

permissions:
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Locate newsletter files from this push (prefer exact diff)
        id: find
        shell: bash
        run: |
          set -euo pipefail
      
          echo "== Changed files in this push =="
          git fetch --depth=2 origin "${{ github.ref }}"
          CHANGED="$(git diff --name-only "${{ github.event.before }}" "${{ github.sha }}")"
          echo "$CHANGED"
      
          # Pick date-named newsletters touched by this push
          MAPFILE=()
          while IFS= read -r f; do
            [[ "$f" =~ ^newsletter/[0-9]{4}-[0-9]{2}-[0-9]{2}\.md$ ]] && MAPFILE+=("$f")
          done < <(printf '%s\n' "$CHANGED")
      
          if [ "${#MAPFILE[@]}" -eq 0 ]; then
            echo "No date-named newsletter in this push, falling back to latest by filename…"
            MD="$(ls -1 newsletter/*.md 2>/dev/null | grep -E '/[0-9]{4}-[0-9]{2}-[0-9]{2}\.md$' | sort | tail -n 1 || true)"
            [ -z "${MD:-}" ] && { echo "No newsletter files found"; exit 1; }
          else
            # If multiple were touched, take the newest by filename
            MD="$(printf '%s\n' "${MAPFILE[@]}" | sort | tail -n 1)"
          fi
      
          SLACK="${MD%.md}_slack.txt"
          echo "Selected MD: $MD"
          [ -f "$SLACK" ] && echo "Matching Slack exists: $SLACK" || echo "Slack will be generated: $SLACK"
      
          echo "file_md=$MD" >> "$GITHUB_OUTPUT"
          echo "file_slack=$SLACK" >> "$GITHUB_OUTPUT"


      - name: Ensure Slack text exists (fallback generator)
        shell: bash
        run: |
          set -euo pipefail
          MD="${{ steps.find.outputs.file_md }}"
          SLACK="${{ steps.find.outputs.file_slack }}"
          if [ ! -f "$SLACK" ]; then
            echo "Generating Slack text from $MD → $SLACK"
            export MD SLACK
            python scripts/format_slack.py
          else
            echo "Slack file already exists: $SLACK"
          fi

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Post full message to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: "#ai-publish-test"   # <-- change if needed
          FILE_SLACK: ${{ steps.find.outputs.file_slack }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${SLACK_BOT_TOKEN:-}" ]; then
            echo "SLACK_BOT_TOKEN is not set"; exit 1
          fi
          if [ ! -f "$FILE_SLACK" ]; then
            echo "Slack file missing at post time: $FILE_SLACK"; exit 1
          fi
          TEXT="$(cat "$FILE_SLACK")"
          JSON="$(jq -n --arg ch "$SLACK_CHANNEL" --arg txt "$TEXT" \
            '{channel:$ch, text:$txt, unfurl_links:false}')"
          RESP="$(curl -s -w '\n%{http_code}' -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-type: application/json; charset=utf-8" \
            --data "$JSON")"
          BODY="$(echo "$RESP" | head -n1)"
          CODE="$(echo "$RESP" | tail -n1)"
          echo "Slack HTTP: $CODE"
          echo "Slack Body:"; echo "$BODY" | jq .
          OK="$(echo "$BODY" | jq -r '.ok // false')"
          if [ "$OK" != "true" ]; then
            echo "Slack post failed"; exit 1
          fi

      - name: Update Confluence archive (v1 API)
        env:
          CF_BASE:  ${{ secrets.CONFLUENCE_BASE_URL }}   # e.g. https://yourcompany.atlassian.net
          CF_USER:  ${{ secrets.CONFLUENCE_USER }}        # Atlassian email
          CF_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}   # Atlassian API token
          CF_PAGE_ID: ${{ secrets.CONFLUENCE_PAGE_ID }}   # numeric page id
          FILE_MD: ${{ steps.find.outputs.file_md }}
        shell: bash
        run: |
          set -euo pipefail
          for v in CF_BASE CF_USER CF_TOKEN CF_PAGE_ID; do
            if [ -z "${!v:-}" ]; then echo "$v is not set"; exit 1; fi
          done

          HTML_CONTENT="$(printf '<pre>%s</pre>' "$(sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g' "$FILE_MD")")"
          TITLE="$(basename "$FILE_MD" .md): MitiMind"

          CURR="$(curl -s -u "$CF_USER:$CF_TOKEN" \
            "$CF_BASE/wiki/rest/api/content/$CF_PAGE_ID?expand=version")"
          if [ -z "$CURR" ]; then echo "Empty response from Confluence (version read)"; exit 1; fi
          VER="$(echo "$CURR" | jq -r '.version.number // 1')"
          NEW=$((VER+1))

          DATA="$(jq -n --arg title "$TITLE" --arg body "$HTML_CONTENT" --argjson ver "$NEW" \
            '{title:$title, type:"page", version:{number:$ver}, body:{storage:{value:$body, representation:"storage"}}}')"

          RESP="$(curl -s -w '\n%{http_code}' -u "$CF_USER:$CF_TOKEN" \
            -X PUT "$CF_BASE/wiki/rest/api/content/$CF_PAGE_ID" \
            -H "Content-Type: application/json" \
            --data "$DATA")"

          BODY="$(echo "$RESP" | head -n1)"
          CODE="$(echo "$RESP" | tail -n1)"

          echo "Confluence HTTP: $CODE"
          echo "Confluence Body:"; echo "$BODY" | jq .

          if [ "$CODE" -lt 200 ] || [ "$CODE" -ge 300 ]; then
            echo "Confluence update failed"; exit 1
          fi

          echo "Updated page title:"; echo "$BODY" | jq -r '.title'
          echo "New version:"; echo "$BODY" | jq -r '.version.number'
