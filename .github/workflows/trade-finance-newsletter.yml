name: Generate Trade Finance Newsletter

on:
  schedule:
    # Bi-weekly on Tuesdays at 9:00 AM CET (8:00 AM UTC)
    # Note: GitHub Actions doesn't support bi-weekly directly, so this runs weekly
    # Bi-weekly logic implemented via week number check below
    - cron: "0 8 * * 2"
  
  workflow_dispatch:

jobs:
  generate-newsletter:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check if bi-weekly schedule
      id: biweekly_check
      run: |
        # Get current week number (ISO week)
        WEEK_NUM=$(date +%V)
        CURRENT_DATE=$(date '+%Y-%m-%d')
        
        echo "Current date: $CURRENT_DATE"
        echo "Current ISO week number: $WEEK_NUM"
        
        # Bi-weekly schedule: Run on even week numbers
        # Week 2, 4, 6, 8, 10, etc. of the year
        if [ $((WEEK_NUM % 2)) -eq 0 ]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "This is a bi-weekly newsletter week (week $WEEK_NUM) - RUNNING"
        else
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "Skipping this week (week $WEEK_NUM) - not a bi-weekly newsletter week"
        fi
        
        # Always run if manually triggered
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "Manual trigger - running newsletter generation"
        fi
      
    - name: Set up Python
      if: steps.biweekly_check.outputs.should_run == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      if: steps.biweekly_check.outputs.should_run == 'true'
      run: |
        pip install -r requirements.txt
        
    - name: Generate newsletter
      if: steps.biweekly_check.outputs.should_run == 'true'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        cd scripts
        python generate.py
        
    - name: Post to Slack
      if: steps.biweekly_check.outputs.should_run == 'true'
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SLACK_CHANNEL: ${{ vars.SLACK_CHANNEL }}
      run: |
        # Check if SLACK_CHANNEL is set
        if [ -z "$SLACK_CHANNEL" ]; then
          echo "ERROR: SLACK_CHANNEL GitHub variable is not set!"
          echo "Please set the SLACK_CHANNEL variable in Settings → Secrets and Variables → Actions → Variables"
          echo "Example value: #anish-ai-new"
          exit 1
        fi
        
        echo "Posting to Slack channel: $SLACK_CHANNEL"
        
        # Create newsletter directory if it doesn't exist
        mkdir -p newsletter
        
        # Find the most recent newsletter file with safety check
        NEWSLETTER_FILE=$(find newsletter -name "*_slack.txt" -type f | sort -t/ -k2 | tail -n1)
        
        if [ -z "$NEWSLETTER_FILE" ]; then
          echo "ERROR: No newsletter file found in newsletter/ directory!"
          echo "Expected format: newsletter/YYYY-MM-DD_slack.txt"
          exit 1
        fi
        
        if [ -f "$NEWSLETTER_FILE" ]; then
          echo "Posting newsletter from: $NEWSLETTER_FILE"
          
          # Read the newsletter content
          NEWSLETTER_CONTENT=$(cat "$NEWSLETTER_FILE")
          
          # Post to Slack using curl
          curl -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
              \"channel\": \"$SLACK_CHANNEL\",
              \"text\": $(echo "$NEWSLETTER_CONTENT" | jq -Rs .),
              \"unfurl_links\": false,
              \"unfurl_media\": false
            }"
        else
          echo "No newsletter file found!"
          exit 1
        fi
        
    - name: Archive newsletter
      if: success() && steps.biweekly_check.outputs.should_run == 'true'
      run: |
        echo "Newsletter successfully generated and posted to Slack"
        echo "File: $(ls -t newsletter/*_slack.txt | head -n1)"
